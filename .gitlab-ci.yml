workflow:
  name: "Pipeline for branch: $CI_COMMIT_BRANCH"
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH == "test"
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_COMMIT_BRANCH == "staging"
      when: always

build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH
  before_script:
    - 'export TAG_ID=$(date "+%d-%m-%YT%H%M")'
    - apk add --no-cache curl # Install curl in Alpine-based image
    - >
      DEPLOYMENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ");
      CI_JOB_STATUS=Started;
      EMOJI_STATUS=":construction:";
      curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"*Project:* $CI_PROJECT_NAME\n*App Version:* $TAG_ID\n*Job:* $CI_PIPELINE_NAME\n*Environment:* $CI_COMMIT_BRANCH\n*User:* $GITLAB_USER_NAME\n*Deployment Date:* $DEPLOYMENT_DATE\n*Status:* $CI_JOB_STATUS $EMOJI_STATUS\n*Details:* <$CI_PIPELINE_URL|Pipeline Details>\", \"mrkdwn\": true}" $SLACK_WEBHOOK;
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker system prune -af
  after_script:
    - >
      DEPLOYMENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ");
      if [ "$CI_JOB_STATUS" = "success" ]; then
        EMOJI_STATUS=":white_check_mark:";
      else
        EMOJI_STATUS=":exclamation:";
      fi;
      curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"*Project:* $CI_PROJECT_NAME\n*App Version:* $TAG_ID\n*Job:* $CI_PIPELINE_NAME\n*Environment:* $CI_COMMIT_BRANCH\n*User:* $GITLAB_USER_NAME\n*Deployment Date:* $DEPLOYMENT_DATE\n*Status:* $CI_JOB_STATUS $EMOJI_STATUS\n*Details:* <$CI_PIPELINE_URL|Pipeline Details>\", \"mrkdwn\": true}" $SLACK_WEBHOOK;
  script:
    - docker pull "$DOCKER_IMAGE_NAME:latest" || true
    - docker build --cache-from "$DOCKER_IMAGE_NAME:latest" -t "$DOCKER_IMAGE_NAME:$TAG_ID" .
    - docker tag "$DOCKER_IMAGE_NAME:$TAG_ID" "$DOCKER_IMAGE_NAME:latest"
    - docker push "$DOCKER_IMAGE_NAME:$TAG_ID"
    - docker push "$DOCKER_IMAGE_NAME:latest"
